#!/bin/bash
#
#	/etc/rc.d/init.d/ftrace
#
#	Enables or disables ftrace in the kernel
#
# chkconfig: - 99 99
# description: Enables or disables kernel ftrace.
#              There's no daemon or pid file.

### BEGIN INIT INFO
# ref: http://refspecs.linux-foundation.org/LSB_3.2.0/LSB-Core-generic/LSB-Core-generic/facilname.html
# Provides: ftrace
# Required-Start: $syslog
# Required-Stop: 
# Default-Start: 2345
# Default-Stop: 99
# Short-Description: Enables or disables ftrace in the kernel
# Description:      Enables the ftrace kernel facility, 
#    either dynamically or persistently across reboots
### END INIT INFO


# exit codes
  # standard codes per
  # http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/iniscrptact.html
  rc_OK=0
  rc_dead_and_pid_file_exists=1
  rc_dead_and_lock_exists=2
  rc_not_running=3
  rc_unimplemented=3
  rc_unknown=4
  # app-specific codes (150-199)
  rc_bad_tracer=150
  rc_bad_buffer_size=151
  rc_debugfs_not_mounted=152
  rc_debugfs_improperly_mounted=153

prog=$(basename $0)

# Source function library.
. /etc/init.d/functions

# read the config file if it exists
config=/etc/ftrace.conf
[ -r ${config} ] && . ${config}

# default values (if not defined in config)
tracer=${tracer:-function}
buffer_size_kb=${buffer_size_kb:-10240}

# functions

debugfs_mounted() {
	# returns 0 if debugfs is mounted at /sys/kernel/debug
	# otherwise returns non-zero
	grep -E '/sys/kernel/debug[[:space:]]+debugfs' /etc/mtab &> /dev/null
}

check_status() {
	# quietly check:
	# - debugfs is mounted at /sys/kernel/debug
	# - actual and configured tracer are the same
	# - actual and configured buffer size are the same
	# 
	# If all the above are true, return 0.
	# If any is not true, populate the "msg" variable and return non-zero.

	msg=""
	_rc=0
	if debugfs_mounted; then
	  # confirm the correct tracer
	  _tracer=$(cat /sys/kernel/debug/tracing/current_tracer 2> /dev/null)
	  if ! [[ "${_tracer}" = "${tracer}" ]]; then
	    msg="Actual tracer does not match configured tracer."
	    _rc=$rc_bad_tracer
	  fi

	  # confirm the correct buffer size
	  _buffer_size_kb=$(cat /sys/kernel/debug/tracing/buffer_size_kb 2> /dev/null)
	  if ! [[ "${_buffer_size_kb}" = "${buffer_size_kb}" ]]; then
	    msg="$msg Actual buffer size does not match configured buffer size."
	    _rc=$rc_bad_buffer_size
	  fi
	else
	  msg="debugfs is not mounted at /sys/kernel/debug"
	  _rc=$rc_debugfs_not_mounted
	fi
	return $_rc
}

start() {
	echo -n "Enabling ftrace: "

	# attempt to mount
	msg=$(mount -t debugfs nodev /sys/kernel/debug 2>&1)
	[[ -n "${msg}" ]] && logger -t $prog "Error: ${msg}"

	if debugfs_mounted; then
	  # apply config
	  msg="$(echo ${tracer} 2>&1 > /sys/kernel/debug/tracing/current_tracer)"
	  [[ -n "${msg}" ]] && logger -t $prog "Error: ${msg}"
	  msg="$(echo ${buffer_size_kb} 2>&1 > /sys/kernel/debug/tracing/buffer_size_kb)"
	  [[ -n "${msg}" ]] && logger -t $prog "Error: ${msg}"
	fi

	# per http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/iniscrptact.html
	# this should return 0 if we are started, even on a service already running
	check_status
	_rc=$?

	[ $_rc -eq 0 ] && echo_success || echo_failure
	echo
	return $_rc
}	

stop() {
	echo -n "Disabling ftrace: "

	if debugfs_mounted; then
          # apply config
          msg="$(echo nop 2>&1 > /sys/kernel/debug/tracing/current_tracer)"
          [[ -n "${msg}" ]] && logger -t $prog "Error: ${msg}"
          msg="$(echo 0 2>&1 > /sys/kernel/debug/tracing/tracing_enabled)"
          [[ -n "${msg}" ]] && logger -t $prog "Error: ${msg}"
        fi

	msg=$(umount /sys/kernel/debug 2>&1)
	[[ -n "${msg}" ]] && logger -t $prog "Error: ${msg}"
	debugfs_mounted && _rc=$rc_debugfs_improperly_mounted || _rc=$rc_OK

	# per http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/iniscrptact.html
	# we should return 0 if stopped, even if we were already stopped or not enabled
	[ $_rc -eq 0 ] && echo_success || echo_failure
	echo
	return $_rc
}

status() {
        echo -n "Status of ftrace: "

	check_status
	_rc=$?

	[ $_rc -eq 0 ] && echo_success || echo_failure
	echo
	[[ -n "${msg}" ]] && logger -st $prog "Error: ${msg}"
	return $_rc
}

case "$1" in
    start)
	start
	;;
    stop)
	stop
	;;
    status)
	status
	;;
    restart)
    	stop
	start
	;;
    *)
	echo "Usage: ftrace {start|stop|status|restart}"
	exit $rc_unimplemented
	;;
esac
exit $?
